@page "/tests"
@using Contracts.APICommunication
@using Contracts.APICommunication.Enums
@using Contracts.Internal
@using Frontend.Presentation.Services
@using Frontend.Presentation.Pages.Components

@inject TestPreviewService TestPreviewService
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="20px">
    <RadzenDropDown TValue="List<string>" Multiple="true" Placeholder="Tags" @bind-Value="_tags" LoadData="LoadTags" 
                    AllowVirtualization="true" Count=@_tagCount AllowFiltering="true" Data=@_tagsData
                    Change="RefreshDataStateAsync"/>

    <RadzenDropDown TValue="List<string>" Multiple="true" Placeholder="Access" @bind-Value="_access"
                    Data=@(Enum.GetNames(typeof(TestAccess)).ToList())
                    Change="RefreshDataStateAsync" />
    
    <RadzenDropDown TValue="List<string>" Multiple="true" Placeholder="Status" @bind-Value="_status"
                    Data=@(Enum.GetNames(typeof(TestStatus)).ToList())
                    Change="RefreshDataStateAsync" />
    
    <RadzenDropDown TValue="List<string>" Multiple="true" Placeholder="Complexity" @bind-Value="_difficulty"
                    Data=@(Enum.GetNames(typeof(TestComplexity)).ToList())
                    Change="RefreshDataStateAsync" />
    
    <RadzenTextBox Placeholder="Search..." @bind-Value="_search" Change="RefreshDataStateAsync" />

</RadzenStack>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="10px" Style="margin-top:15px">
    <RadzenDatePicker TValue="DateOnly" @bind-Value="_dateOfTest" Placeholder="Date of test" Change="RefreshDataStateAsync"/>
    
    <RadzenStack Style="margin: 0 10px;">
        <RadzenText Text=@($"Duration: {_maxDuration}") Style="margin:unset" />
        <RadzenSlider Min="0" Max="90" TValue="int" @bind-Value=@_maxDuration Step="10" Change="RefreshDataStateAsync"/>
    </RadzenStack>

    
    <RadzenDropDown TValue="string" Multiple="false" Placeholder="Sort by" @bind-Value="_sortBy"
                    Data=@(Enum.GetNames(typeof(TestSortBy)).ToList())
                    Change="RefreshDataStateAsync" />

    <RadzenToggleButton Text="Favourite" Icon="favorite" IconColor=@(_favouriteFilter ? "#fff" : "#000" ) Shade="Shade.Default" ToggleShade="Shade.Default"
                        Click=@(async () => { _favouriteFilter = !_favouriteFilter; await RefreshDataStateAsync(); })
                        ButtonStyle="ButtonStyle.Base" ToggleButtonStyle="ButtonStyle.Danger"
                        Style="border:1px solid #000;" />
    
    <RadzenButton Style="background-color: transparent;border:1px solid #000000;color:#000000" Text="Reset filters" />
</RadzenStack>



<div class="test-preview-container">
    @foreach (var item in _previewModels)
    {
        <div class="test-preview-item">
            <TestPreview Test="@item" />
        </div>
    }
</div>

<RadzenPager ShowPagingSummary="true" AlwaysVisible="true"
             HorizontalAlign="HorizontalAlign.Right" Count="_totalCount" 
             PageSize="@PAGE_SIZE" PageNumbersCount="5" PageChanged="@PageChanged" />

@code {



    private List<string> _difficulty = null!;
    private List<string> _tags = null!;
    private List<string> _access = null!;
    private List<string> _status = null!;
    private string _search = null!;
    private DateOnly _dateOfTest;
    private string _sortBy = null!;
    private bool _favouriteFilter;
    private int _maxDuration = 90;
    private const int PAGE_SIZE = 20;

    private string _category = null!;
    private List<TestPreviewModel> _previewModels = [];

    private List<string> _tagsData = [];
    private string _lastTagFilter = null!;
    private int _tagCount;

    private int _pageLimit = PAGE_SIZE;
    private int _pageOffset = 0;
    private int _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        _category = LocalStorage.GetItem<string>("testCategory");
        _previewModels = await LoadDataAsync();
        await LoadTags(new LoadDataArgs() { Top = 10 });
    }

    private async Task LoadTags(LoadDataArgs args)
    {
        await Task.Yield();

        if (!string.IsNullOrEmpty(args.Filter) && _lastTagFilter != args.Filter)
        {
            args.Skip = 0;
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {
            _lastTagFilter = args.Filter;
        }

        var rsp = await TestPreviewService.GetTagsList(
            args.Top.HasValue ? args.Top.Value : 10,
            args.Skip.HasValue ? args.Skip.Value : 0,
            args.Filter);

        _tagsData = rsp.Data.ToList();
        _tagCount = rsp.TotalCount;

        StateHasChanged();
    }

    private async Task<List<TestPreviewModel>> LoadDataAsync()
    {

        var request = new TestListRequest
        {
            PagedRequest = new PagedRequest
            {
                Offset = _pageOffset,
                Limit = _pageLimit
            },
            TestCategory = Enum.TryParse<Contracts.APICommunication.Enums.TestCategory>(_category, true, out var categoryEnum)
                ? categoryEnum
                : Contracts.APICommunication.Enums.TestCategory.BugReports,

            Difficulties = _difficulty?
                .Select(x => Enum.TryParse<TestComplexity>(x, true, out var difficultyEnum)
                    ? difficultyEnum
                    : (TestComplexity?)null)
                .Where(x => x.HasValue)
                .Select(x => x.Value)
                .ToList() ?? new List<TestComplexity>(),

            Tags = _tags ?? new List<string>(),

            IsFavourite = _favouriteFilter,

            Accesses = _access?
                .Select(x => Enum.TryParse<TestAccess>(x, true, out var accessEnum)
                    ? accessEnum
                    : (TestAccess?)null)
                .Where(x => x.HasValue)
                .Select(x => x.Value)
                .ToList() ?? new List<TestAccess>(),

            DateOfTest = _dateOfTest,

            MaxDuration = _maxDuration,

            Search = _search ?? string.Empty,

            TestSortBy = Enum.TryParse<Contracts.APICommunication.Enums.TestSortBy>(_sortBy, true, out var sortEnum)
                ? sortEnum
                : Contracts.APICommunication.Enums.TestSortBy.Longest,

            TestStatuses = _status?
                .Select(x => Enum.TryParse<TestStatus>(x, true, out var statusEnum)
                    ? statusEnum
                    : (TestStatus?)null)
                .Where(x => x.HasValue)
                .Select(x => x.Value)
                .ToList() ?? new List<TestStatus>(),
        };

        var tests = await TestPreviewService.GetPagedTestList(request);
        _totalCount = tests.TotalCount;

        return MapToTestPreviewModels(tests.Data);
    }

    private async Task RefreshDataStateAsync()
    {
        _previewModels = await LoadDataAsync();
        StateHasChanged();
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        _pageOffset = args.Skip;
        _previewModels = await LoadDataAsync();
    }

    private List<TestPreviewModel> MapToTestPreviewModels(List<TestPreviewDto> dtos)
    {
        var models = new List<TestPreviewModel>();

        foreach (var dto in dtos)
        {
            models.Add(new TestPreviewModel
                {
                    IsPremium = dto.IsPremium,
                    Caption = dto.Caption,
                    UploadDate = dto.UploadDate,
                    DurationInMinutes = dto.DurationInMinutes,
                    Category = dto.Category,
                    Complexity = dto.Complexity,
                    Tags = dto.Tags,
                    IsCompleted = dto.IsCompleted,
                    IsFavourite = dto.IsFavourite
                });
        }

        return models;
    }
}
