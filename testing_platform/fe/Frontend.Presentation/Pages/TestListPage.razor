@page "/tests"

@using Contracts.APICommunication
@using Contracts.APICommunication.Enums
@using Contracts.Internal
@using Contracts.Internal.Enums
@using Frontend.Presentation.Pages.Components
@using Frontend.Presentation.Services
@using TestCategory = Frontend.Presentation.Pages.Components.TestCategory
@inject TestPreviewService TestPreviewService
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="20px">

    <RadzenDropDown TValue="string" Placeholder="Categoty" @bind-Value="_category"
                    Data=@(Enum.GetNames(typeof(Contracts.APICommunication.Enums.TestCategory)).ToList())
                    Change="RefreshDataStateAsync"/>

    <RadzenDropDown TValue="string" Placeholder="Difficulty" @bind-Value="_difficulty"
                    Data=@(Enum.GetNames(typeof(TestComplexity)).ToList())
                    Change="RefreshDataStateAsync"/>

    <RadzenDropDown TValue="List<string>" Multiple="true" Placeholder="Tags" @bind-Value="_tags" LoadData="LoadTags" 
                    AllowVirtualization="true" Count=@_tagCount AllowFiltering="true" Data=@_tagsData
                    Change="RefreshDataStateAsync"/>

</RadzenStack>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="10px" Style="margin-top:15px">
    <RadzenToggleButton Text="Completed" Icon="check" IconColor=@(_completedFilter ? "#fff" : "#000" ) 
                        Shade="Shade.Default" ToggleShade="Shade.Default"
                        Click=@(async () => { _completedFilter = !_completedFilter; await RefreshDataStateAsync(); })
                        ButtonStyle="ButtonStyle.Base" ToggleButtonStyle="ButtonStyle.Success"
                        Style="border:1px solid #000;"/>
    
    <RadzenToggleButton Text="Favourite" Icon="favorite" IconColor=@(_favouriteFilter ? "#fff" : "#000" ) Shade="Shade.Default" ToggleShade="Shade.Default"
                        Click=@(async () => { _favouriteFilter = !_favouriteFilter; await RefreshDataStateAsync(); })
                        ButtonStyle="ButtonStyle.Base" ToggleButtonStyle="ButtonStyle.Danger"
                        Style="border:1px solid #000;" />
    
    <RadzenToggleButton Text="Premium" Icon="star" IconColor=@(_premiumFilter ? "#fff" : "#000" ) Shade="Shade.Default" ToggleShade="Shade.Default"
                        Click=@(async () => { _premiumFilter = !_premiumFilter; await RefreshDataStateAsync(); })
                        ButtonStyle="ButtonStyle.Base" ToggleButtonStyle="ButtonStyle.Secondary" 
                        Style="border:1px solid #000;" />
</RadzenStack>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="15px" Style="margin-top: 10px">
    <RadzenButton Variant="Variant.Text" Text="Order by date" Icon=@(_orderDateDirectionAsc ? "keyboard_arrow_down" : "keyboard_arrow_up")
                  Click="OnDateSortingChanged" IconColor="#000" Style="color:#000000" />

    <RadzenButton Variant="Variant.Text" Text="Order by duration" Icon=@(_orderDurationDirectionAsc ? "keyboard_arrow_down" : "keyboard_arrow_up")
                  Click="OnDurationSortingChanged" IconColor="#000" Style="color: #000000" />
</RadzenStack>

<div class="test-preview-container">
    @foreach (var item in _previewModels)
    {
        <div class="test-preview-item">
            <TestPreview Test="@item" />
        </div>
    }
</div>

<RadzenPager ShowPagingSummary="true" AlwaysVisible="true"
             HorizontalAlign="HorizontalAlign.Right" Count="_totalCount" 
             PageSize="@PAGE_SIZE" PageNumbersCount="5" PageChanged="@PageChanged" />

@code {

    private const int PAGE_SIZE = 20;

    private bool _completedFilter;
    private bool _favouriteFilter;
    private bool _premiumFilter;

    private string _category = null!;
    private string _difficulty = null!;
    private List<string> _tags = null!;

    private bool _orderByDate = false;
    private bool _orderByDuration = false;
    private bool _orderDateDirectionAsc = false;
    private bool _orderDurationDirectionAsc = false;

    private List<TestPreviewModel> _previewModels = [];

    private List<string> _tagsData = [];
    private string _lastTagFilter = null!;
    private int _tagCount;

    private int _pageLimit = PAGE_SIZE;
    private int _pageOffset = 0;
    private int _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        _category = LocalStorage.GetItem<string>("testCategory");
        _previewModels = await LoadDataAsync();
        await LoadTags(new LoadDataArgs() { Top = 10 });
    }

    private async Task LoadTags(LoadDataArgs args)
    {
        await Task.Yield();

        if (!string.IsNullOrEmpty(args.Filter) && _lastTagFilter != args.Filter)
        {
            args.Skip = 0;
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {
            _lastTagFilter = args.Filter;
        }

        var rsp = await TestPreviewService.GetTagsList(
            args.Top.HasValue ? args.Top.Value : 10,
            args.Skip.HasValue ? args.Skip.Value : 0,
            args.Filter);

        _tagsData = rsp.Data.ToList();
        _tagCount = rsp.TotalCount;

        StateHasChanged();
    }

    private async Task<List<TestPreviewModel>> LoadDataAsync()
    {

        var request = new TestListRequest
        {
            PagedRequest = new PagedRequest
            {
                Offset = _pageOffset,
                Limit = _pageLimit
            },
            TestListOrdering = new TestListOrderingDto
            {
                OrderByDate = _orderByDate,
                OrderByDuration = _orderByDuration,
                OrderInAscOrder = _orderByDate ? _orderDateDirectionAsc : _orderDurationDirectionAsc
            },
            TestCategory = Enum.TryParse<Contracts.APICommunication.Enums.TestCategory>(_category, true, out var categoryEnum) 
                ? categoryEnum : Contracts.APICommunication.Enums.TestCategory.BugReports,
            TestDifficulty = Enum.TryParse<TestDifficulty>(_difficulty, true, out var difficultyEnum) ? difficultyEnum : null,
            Tags = _tags,
            IsCompleted = _completedFilter,
            IsFavourite = _favouriteFilter,
            IsPremium = _premiumFilter,
        };

        var tests = await TestPreviewService.GetPagedTestList(request);
        _totalCount = tests.TotalCount;

        return MapToTestPreviewModels(tests.Data);
    }

    private async Task RefreshDataStateAsync()
    {
        _previewModels = await LoadDataAsync();
        StateHasChanged();
    }

    private async Task OnDateSortingChanged()
    {
        _orderByDate = true;
        _orderByDuration = false;
        _orderDateDirectionAsc = !_orderDateDirectionAsc;

        await RefreshDataStateAsync();
    }

    private async Task OnDurationSortingChanged()
    {
        _orderByDuration = true;
        _orderByDate = false;
        _orderDurationDirectionAsc = !_orderDurationDirectionAsc;

        await RefreshDataStateAsync();
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        _pageOffset = args.Skip;
        _previewModels = await LoadDataAsync();
    }

    private List<TestPreviewModel> MapToTestPreviewModels(List<TestPreviewDto> dtos)
    {
        var models = new List<TestPreviewModel>();

        foreach (var dto in dtos)
        {
            models.Add(new TestPreviewModel
                {
                    IsPremium = dto.IsPremium,
                    Caption = dto.Caption,
                    UploadDate = dto.UploadDate,
                    DurationInMinutes = dto.DurationInMinutes,
                    Category = dto.Category,
                    Complexity = dto.Complexity,
                    Tags = dto.Tags,
                    IsCompleted = dto.IsCompleted,
                    IsFavourite = dto.IsFavourite
                });
        }

        return models;
    }
}
