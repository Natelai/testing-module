@page "/account"
@using Frontend.Presentation.Pages.Modals
@using Frontend.Presentation.Services
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject UserService UserService

<RadzenText Style="width: 100%;text-align: center;color: #000000;font-size: 64px;font-weight: 700;">Your Account</RadzenText>

<RadzenStack Orientation="Orientation.Horizontal" Gap="15px">
    <RadzenImage Path="./assets/images/avatar-default.png" Style="height:250px;width: auto" ></RadzenImage>
    
    <RadzenStack Style="height: 100%; padding: 20px 0" Gap="20px">
        <RadzenText Text="@_userName" Style="color:#000000;font-size: 60px;font-weight: 600"/>
        <RadzenText Text="@_email" Style="color:#000000;font-size: 48px;font-weight: 500"/>
    </RadzenStack>
</RadzenStack>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="margin-top: 50px;padding:10px">
    <RadzenButton Click="ShowEditUserInfoAsync"
        Style="border: 1px solid #000000; border-radius: 10px; width: 23%; height: 70px; background-color: transparent;color: #000000">
        Edit user information
    </RadzenButton>
    <RadzenButton Click="ShowChangePasswordModalAsync"
        Style="border: 1px solid #000000; border-radius: 10px; width: 23%; height: 70px;background-color: transparent;color: #000000">
        Change password
    </RadzenButton>
    <RadzenButton Click="SnowEditTagsDialogAsync"
        Style="border: 1px solid #000000; border-radius: 10px; width: 23%; height: 70px;background-color: transparent;color: #000000">
        Edit tags
    </RadzenButton>
    <RadzenButton Click=@(() => NavigationManager.NavigateTo("/analytics"))
        Style="border: 1px solid #000000; border-radius: 10px; width: 23%; height: 70px;background-color: transparent;color: #000000">
        Analytics & Statistics
    </RadzenButton>
</RadzenStack>

@code {
    private string _email = string.Empty;
    private string _userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var rsp = await UserService.GetShortUserProfileAsync();

        _email = rsp.Email;
        _userName = rsp.UserName;
    }

    private async Task ShowChangePasswordModalAsync()
    {
        await DialogService.OpenAsync<ChangePasswordModal>("",
            new Dictionary<string, object>(),
            new DialogOptions()
                {
                    ShowTitle = false,
                    Resizable = false,
                    Draggable = true,
                    Width = "500px",
                    ShowClose = true,
                });
    }

    private async Task ShowEditUserInfoAsync()
    {
        await DialogService.OpenAsync<EditUserModal>("",
            new Dictionary<string, object>(),
            new DialogOptions()
            {
                ShowTitle = false,
                Resizable = false,
                Draggable = true,
                Width = "500px",
                ShowClose = true,
            });
    }

    private async Task SnowEditTagsDialogAsync()
    {
        await DialogService.OpenAsync<SelectTagsModal>("",
            new Dictionary<string, object>(),
            new DialogOptions()
            {
                ShowTitle = false,
                Resizable = false,
                Draggable = true,
                Width = "1100px",
                ShowClose = true,
            });
    }
}
